####################################################################
# This template builds a script to supercede the previous
# "data_parse" and "data_parse_all" scripts.
# 
# Creates daily by-type files and copies the appropriate subset of
# files to the cooresponding subdirectory for the specified lowering.
#
# Created 2019/06/01 JWP
#
#######################################################################

# Vehicle directory within the cruise data directory
VEHICLEBASEDIR=${BASEDIR}/${CRUISEID}/Vehicle

# Verify the raw data directory exists before proceeding
if [ ! -d ${VEHICLEBASEDIR}/${RAWDIR} ]; then
    echo "ERROR: the directory ${VEHICLEBASEDIR}/${RAWDIR} does not exist"
    exit 1
fi

# Function to parse lines of data from a source data file and store the parsed
# data in the appropriate file and location.
#   Arguments:
#     - 1. file extension of source files. i.e. "CSV", "DEP", "VEH"
#     - 2. file extension of the output files. i.e. "CSV", "DEP", "VEH"
#     - 3. target subdirectory. i.e. "csv", "ctd", "veh"
#     - 4. the date directory to process '20180921'
# -----------------------------------------------------------------------------
parse_data_by_type() {
  source=${1}
  type=${2}
  subDir=${3}
  date=${4}

  echo "Parsing ${source} files for type ${type}"
  
  if [ ! -d ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir} ]; then
      echo "Creating directory ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}"
      mkdir ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}
  fi

  # Change working directory to directory containing the source files 
  cd ${VEHICLEBASEDIR}/${RAWDIR}

  # Loop through files matching the ${date}*.${source} naming convention
  for file in ${date}*.${source}; do
    echo "Processing = ${file}"

    # Retrieve the filename without the file extension
    file_base="${file%.*}"

    # If the output file already exists then do not overwrite it
    if [ -f ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type} ]; then
      echo "Warning: file ${file_base}.${type} already exists.  Skipping."
      continue

    else
      # Use grep to retrieve the lines containing ${type} from ${file}.
      # Save the output file: ${file_base}.${type} to the specified subdirectory: ${subDir}
      grep ${type} ${file} | grep -v MDEP > ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}

      # If there was no output from the grep operations then the resulting file will have a length of 0.
      # If the resulting file has a length of 0 then delete it.
      if [ ! -s ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type} ]; then
        echo "No data found for type ${type}"
        rm -f ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
      fi
    fi
  end

  # Return the working directory to it's previous value
  cd ${_D}
}


# Loop through all the specified dates
for DATE in ${DATES[@]}; do

  # If the source directory does not exist then continue on to the next date
  if [ ! -d ${VEHICLEBASEDIR}/${RAWDIR}/${DATE} ]; then
      echo "ERROR: the directory ${VEHICLEBASEDIR}/${RAWDIR}/${DATE} does not exist, skipping"
      continue
  fi

  # Loop through all the specificed datatypes
  for DATA_TYPE in ${DATA_TYPES[@]}; do

    # This case statement handles customizing the call to the parse_data_by_type
    # function.  The format of each case statement is:

      # source=VEH <-- source data file extensiont, if the source is the same as the 
      # type=ALT <-- Type of data being grep'ed from the source file
      # subDir=veh <-- destination directory for output file
      # date=${DATE} <-- the date to process, DO NOT CHANGE
      # outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type} <-- resulting output file, DO NOT CHANGE
      # parse_data_by_type ${source} ${type} ${subDir} ${date} <-- The call to parse_data_by_date, DO NOT CHANGE
      # if [ -f ${outfile} ]; then
      #   # here's where you can do additional stuff to the outfile
      # fi

    case ${DATA_TYPE} in

      "ALT")
        source=VEH
        type=${DATA_TYPE}
        subDir=veh
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "CSV")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=csv
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile

          # Adding a header record to the csv file.
          cat ${SCRIPTDIR}/additional_scripts/csvhead.tx ${outfile} > ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}_tmp.${type}
          mv ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}_tmp.${type} ${outfile}
        fi
        ;;

      "CT1")
        source=VEH
        type=${DATA_TYPE}
        subDir=ctd
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "CT2")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=ct2
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "CTM")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=ctm
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "DEP")
        source=VEH
        type=${DATA_TYPE}
        subDir=veh
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "EH1")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=eh1
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile

          # Run a sed substitution against the output file
          cat -v ${outfile} | sed 's/\^M/\n/g' >  ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}_tmp.${type}
          mv ${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}_tmp.${type} ${outfile}
        fi
        ;;

      "HFB")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=hfp
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "HFP")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=hfp
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "HFR")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=hfp
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "HMR")
        source=VEH
        type=${DATA_TYPE}
        subDir=mag
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "LSS")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=lss
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "OCT")
        source=VEH
        type=${DATA_TYPE}
        subDir=veh
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "OOS")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=oos
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "SVP")
        source=${DATA_TYPE}
        type=${DATA_TYPE}
        subDir=svp
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      "SYS")
        source=VEH
        type=${DATA_TYPE}
        subDir=sys
        date=${DATE}
        outfile=${VEHICLEBASEDIR}/${PROCDIR}/${LOWERINGID}/${subDir}/${file_base}.${type}
        parse_data_by_type ${source} ${type} ${subDir} ${date}
        if [ -f ${outfile} ]; then
          #here's where you can do additional stuff to the outfile
        fi
        ;;

      *)
        echo "Unknown Datatype: ${DATA_TYPE}"
        ;;

    esac

    sleep 5
  done
done